#!/usr/bin/env python

from __future__ import print_function

import getopt
import sys
import os
import base64

import w4af.core.controllers.output_manager as om
from w4af.core.controllers.dependency_check.dependency_check import dependency_check


USAGE_DOC = '''
w4af - Web Advanced Application Attack and Audit Framework

Usage:

    ./w4af_gui [OPTIONS]

Options:

    -h or --help
        Display this help message.

    -n or --no-update
        No update check will be made when starting. This option takes 
        precedence over the 'auto-update' setting in 'startup.conf' file.
     
    -f or --force-update
        An update check will be made when starting. This option takes 
        precedence over the 'auto-update' setting in 'startup.conf' file.
    
    -p <profile> or --profile=<profile>
        Run with the selected <profile>

For more info visit https://w4af.readthedocs.io/
'''    


def _configure_output_manager():
    """
    Make sure that the output manager is started before doing anything else,
    since it is used by most w4af modules
    """
    try:
        om.manager.set_output_plugins(['console'])
    except Exception as e:
        print('Something went wrong, w4af failed to start the output manager.')
        print('Exception: "%s"' % e)
        sys.exit(-9)


def usage():
    print(USAGE_DOC)


def main():
    try:
        long_options = ['help', 'no-update', 'force-update', 'profile=']
        opts, _ = getopt.getopt(sys.argv[1:], "ehnfp:", long_options)
    except getopt.GetoptError:
        # print help information and exit:
        usage()
        return -3
    
    profile = None
    doupdate = None
    
    for o, a in opts:
        if o in ('-p', '--profile'):
            # selected profile
            profile = a
        if o in ('-h', '--help'):
            usage()
            return 0
        if o in ('-f', '--force-update'):
            doupdate = True
        elif o in ('-n', '--no-update'):
            doupdate = False

    dependency_check()

    from w4af.core.ui.api.main import main
    sys.exit(main(launch_gui=True))

def _main():
    _configure_output_manager()
    sys.exit(main())


if __name__ == "__main__":
    _main()
